<objdefs>
   <objdef class="axoloti.object.AxoObject" id="parenttest">
      <sDescription>C:\Users\jtaelman\Documents\GitHub\AxoStudio\patches\parenttest.axp</sDescription>
      <inlets/>
      <outlets>
         <outlet class="axoloti.outlets.OutletFrac32" name="outlet_1" description="outlet_1" SumBuffer="false"/>
         <outlet class="axoloti.outlets.OutletFrac32" name="outlet_2" description="outlet_2" SumBuffer="false"/>
      </outlets>
      <displays/>
      <params>
         <parameter class="axoloti.parameters.ParameterFrac32UMap" name="value" noLabel="true">
            <MinValue v="0.0"/>
            <MaxValue v="63.5"/>
         </parameter>
      </params>
      <attributes/>
      <sDeclaration><![CDATA[typedef struct {
    ParameterExchange_t PExch[2];
/* parameters2 */
KeyValuePair KVP_c_1_value;
int32_t outlet_1outlet;

KeyValuePair KVP_c_2_value;
int32_t outlet_2outlet;

/* modsource defines */
/* net latches */
} parenttestData;
/* init */
void parenttestInit(parenttestData *data) {
  int i;
    SetKVP_IPVP(&data->KVP_c_1_value,ObjectKvpRoot, "KVP_c_1_value" ,&data->PExch[0],0,133169152);
  KVP_RegisterObject(&data->KVP_c_1_value);
    SetKVP_IPVP(&data->KVP_c_2_value,ObjectKvpRoot, "KVP_c_2_value" ,&data->PExch[1],0,133169152);
  KVP_RegisterObject(&data->KVP_c_2_value);
  numPEx = 2;

int *pp;
// preset 0
pp = (int*)(&Presets[0]);
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
// preset 1
pp = (int*)(&Presets[1]);
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
// preset 2
pp = (int*)(&Presets[2]);
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
// preset 3
pp = (int*)(&Presets[3]);
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
// preset 4
pp = (int*)(&Presets[4]);
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
// preset 5
pp = (int*)(&Presets[5]);
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
// preset 6
pp = (int*)(&Presets[6]);
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
// preset 7
pp = (int*)(&Presets[7]);
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
   *pp++ = -1; *pp++ = 0;
}

/* krate */
void parenttestProcess(parenttestData *data) {
  int i;
  int UNCONNECTED_OUTPUT;
  int UNCONNECTED_INPUT=0;
    int32_t  net0;
    int32_t  net1;
// --------c_1---------
net0= data->PExch[0].modvalue;

// --------outlet_1---------
  data->outlet_1outlet = net0;

// --------c_2---------
net1= data->PExch[1].modvalue;

// --------outlet_2---------
  data->outlet_2outlet = net1;

/* net latch copy */
}

void parenttestMidiInControlChange(parenttestData *data, uint8_t channel, uint8_t cc, uint8_t val){
   if (channel == MIDICHANNEL){
   }
}

void parenttestMidiInNoteOn(parenttestData *data, uint8_t channel, uint8_t note, uint8_t velocity){
   if (channel == MIDICHANNEL){
   }
}

void parenttestMidiInNoteOff(parenttestData *data, uint8_t channel, uint8_t note, uint8_t velocity){
   if (channel == MIDICHANNEL){
   }
}

void parenttestMidiInPitchBend(parenttestData *data, uint8_t channel, uint8_t data1, uint8_t data2){
   if (channel == MIDICHANNEL){
   }
}

void parenttestMidiInAllNotesOff(parenttestData *data, uint8_t channel){
   if (channel == MIDICHANNEL){
   }
}

void parenttestMidiInResetControllers(parenttestData *data, uint8_t channel){
   if (channel == MIDICHANNEL){
   }
}

]]></sDeclaration>
      <sInitCode><![CDATA[]]></sInitCode>
      <sKRateCode><![CDATA[   for(i=0;i<%Poly%;i++) parenttestProcess(&(%name%[i]));
   %outlet_1% = 0;
   for(i=0;i<%Poly%;i++) %outlet_1% += %name%[i].outlet_1outlet;
   %outlet_2% = 0;
   for(i=0;i<%Poly%;i++) %outlet_2% += %name%[i].outlet_2outlet;
]]></sKRateCode>
   </objdef>
</objdefs>