<objdefs>
   <obj.normal id="inf" uuid="d12af924890d417179e6fdbcf71cb1ec3ba31f67" sha="8606d431d169b7fa50fa791b6b8004ea1b74307a">
      <upgradeSha>3b7380de881bb6eafc05c60b35ae2351855d6c09</upgradeSha>
      <sDescription>Infinite gain, hard clipping. Algorithm: linear interpolated zero-crossing detector and blit synthesis</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>inf.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="audio input"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="out" description="audio output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[  static const int blepvoices = 8;
  int16_t *oscp[blepvoices];
  uint32_t nextvoice;
  int32_t i0;
]]></code.declaration>
      <code.init><![CDATA[    int j;
    for(j=0;j<blepvoices;j++)
      oscp[j] = &blept[BLEPSIZE-1];
   nextvoice = 0;
   i0 = 0;
]]></code.init>
      <code.krate><![CDATA[  int j;
  int16_t *lastblep = &blept[BLEPSIZE-1];
  for(j=0;j<BUFSIZE;j++){
    int i;
    int i1 = inlet_in[j]>>2;
    int32_t sum=0;
    if ((i1>0)&&!(i0>0)){   // dispatch
      nextvoice = (nextvoice+1)&(blepvoices-1);
      int32_t x = 64-((-i0<<6)/(i1-i0));
      oscp[nextvoice] = &blept[x];
    } else if ((i1<0)&&!(i0<0)){   // dispatch
      nextvoice = (nextvoice+1)&(blepvoices-1);
      int32_t x = 64-((i0<<6)/(i0-i1));
      oscp[nextvoice] = &blept[x];
    }
    i0 = i1;
    for(i=0;i<blepvoices;i++){ // sample
      int16_t *t = oscp[i];
      if (i&1) sum+=*t; else sum-=*t; 
      t+=64;
      if (t>=lastblep) t=lastblep;
      oscp[i]=t;
    }
    sum -= ((((nextvoice+1)&1)<<1)-1)<<13;
    outlet_out[j]=sum<<13;
  }]]></code.krate>
   </obj.normal>
</objdefs>