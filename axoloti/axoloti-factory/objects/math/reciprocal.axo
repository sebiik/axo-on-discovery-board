<objdefs>
   <obj.normal id="reciprocal" uuid="439f340c2da8a031b6d48ed82626b4fbaaa05774" sha="477c3c22565d29e68966d939dfff9d3a2c82860f">
      <upgradeSha>fee3b32001d8cc8788bdd6d14bd4ad5f04187030</upgradeSha>
      <sDescription>reciprocal, y = 64/x</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>reciprocal.axh</helpPatch>
      <inlets>
         <frac32 name="in" description="in"/>
      </inlets>
      <outlets>
         <frac32 name="out" description="out"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[if (inlet_in) {
      float inf = inlet_in;
      outlet_out = (int)(281474976710656.f/inf);
    } else
        outlet_out = 1<<27;
]]></code.krate>
   </obj.normal>
   <obj.normal id="reciprocal" uuid="4be823e668871835d067cbfe42407b06f927f91f" sha="e20435580358b9ff5231dd01cd91063d8d0b98b">
      <upgradeSha>d4d6b03818ac9b3fa60fa7449f3414ebc196e238</upgradeSha>
      <sDescription>reciprocal, y = 64/x</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>reciprocal.axh</helpPatch>
      <inlets>
         <frac32buffer name="in" description="in"/>
      </inlets>
      <outlets>
         <frac32buffer name="out" description="out"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.srate><![CDATA[if (inlet_in) {
      float inf = inlet_in;
      outlet_out = (int)(281474976710656.f/inf);
    } else
        outlet_out = 1<<27;
]]></code.srate>
   </obj.normal>
</objdefs>