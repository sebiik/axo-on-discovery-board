<objdefs>
   <obj.normal id="mux 8" uuid="de5167d9da39b04039376e8cc620ea2afc22e28a" sha="8235eae55c039d753de98e786521870a1302ce53">
      <upgradeSha>86863079e7321e24cc459b915df254f38201e6e</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>mux.axh</helpPatch>
      <inlets>
         <frac32 name="i0" description="input 0"/>
         <frac32 name="i1" description="input 1"/>
         <frac32 name="i2" description="input 2"/>
         <frac32 name="i3" description="input 3"/>
         <frac32 name="i4" description="input 4"/>
         <frac32 name="i5" description="input 5"/>
         <frac32 name="i6" description="input 6"/>
         <frac32 name="i7" description="input 7"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <frac32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      default: outlet_o= inlet_i7;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 8" uuid="5fa96cfac3006f548c23eb90853045963baaadd0" sha="2c194911f4818cdef7dbc8ab9f44647382b74639">
      <upgradeSha>a3e0aaa6d293ff510b590d6867134851212f0cb4</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>mux.axh</helpPatch>
      <inlets>
         <int32 name="i0" description="input 0"/>
         <int32 name="i1" description="input 1"/>
         <int32 name="i2" description="input 2"/>
         <int32 name="i3" description="input 3"/>
         <int32 name="i4" description="input 4"/>
         <int32 name="i5" description="input 5"/>
         <int32 name="i6" description="input 6"/>
         <int32 name="i7" description="input 7"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <int32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      default: outlet_o= inlet_i7;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 8" uuid="a09f1f8ed9a5ae2334f6eaee0bf5500cdaa683ea" sha="e9c9465916459f6ff2ad9276309692b7dc58cf2a">
      <upgradeSha>71acbf38e6eb8cb51ebdae0e107bac8b0eba477c</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>mux.axh</helpPatch>
      <inlets>
         <frac32buffer name="i0" description="input 0"/>
         <frac32buffer name="i1" description="input 1"/>
         <frac32buffer name="i2" description="input 2"/>
         <frac32buffer name="i3" description="input 3"/>
         <frac32buffer name="i4" description="input 4"/>
         <frac32buffer name="i5" description="input 5"/>
         <frac32buffer name="i6" description="input 6"/>
         <frac32buffer name="i7" description="input 7"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <frac32buffer name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.srate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      default: outlet_o= inlet_i7;break;
}
]]></code.srate>
   </obj.normal>
   <obj.normal id="mux 8" uuid="39db4571d158ce2c2bc895f16048aee73f12d315" sha="f7d4be62cb834bc2e69ce78442f16b160f82fa3">
      <upgradeSha>77fa51c1c05f1ffa15a60b7c28083aa13b3c94</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>mux.axh</helpPatch>
      <inlets>
         <bool32 name="i0" description="input 0"/>
         <bool32 name="i1" description="input 1"/>
         <bool32 name="i2" description="input 2"/>
         <bool32 name="i3" description="input 3"/>
         <bool32 name="i4" description="input 4"/>
         <bool32 name="i5" description="input 5"/>
         <bool32 name="i6" description="input 6"/>
         <bool32 name="i7" description="input 7"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <bool32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= inlet_i0;break;
      case 1: outlet_o= inlet_i1;break;
      case 2: outlet_o= inlet_i2;break;
      case 3: outlet_o= inlet_i3;break;
      case 4: outlet_o= inlet_i4;break;
      case 5: outlet_o= inlet_i5;break;
      case 6: outlet_o= inlet_i6;break;
      case 7: outlet_o= inlet_i7;break;
      default: outlet_o= inlet_i7;break;
}
]]></code.krate>
   </obj.normal>
   <obj.normal id="mux 8" uuid="5f992dab2d3768081b3da60ba557a2eda93df0fe" sha="6e5237a34ef59553863b9dbe7cffc1e0fed853cc">
      <upgradeSha>d4acd0f4d21d8c471e2be730e8f16191ef34ba77</upgradeSha>
      <sDescription>input multiplexer. Output is i1 when s &lt; 1, i[i] when....</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>mux.axh</helpPatch>
      <inlets>
         <charptr32 name="i0" description="input 0"/>
         <charptr32 name="i1" description="input 1"/>
         <charptr32 name="i2" description="input 2"/>
         <charptr32 name="i3" description="input 3"/>
         <charptr32 name="i4" description="input 4"/>
         <charptr32 name="i5" description="input 5"/>
         <charptr32 name="i6" description="input 6"/>
         <charptr32 name="i7" description="input 7"/>
         <int32.positive name="s" description="select"/>
      </inlets>
      <outlets>
         <charptr32 name="o" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.krate><![CDATA[   switch(inlet_s>0?inlet_s:0){
      case 0: outlet_o= (char *)inlet_i0;break;
      case 1: outlet_o= (char *)inlet_i1;break;
      case 2: outlet_o= (char *)inlet_i2;break;
      case 3: outlet_o= (char *)inlet_i3;break;
      case 4: outlet_o= (char *)inlet_i4;break;
      case 5: outlet_o= (char *)inlet_i5;break;
      case 6: outlet_o= (char *)inlet_i6;break;
      case 7: outlet_o= (char *)inlet_i7;break;
      default: outlet_o= (char *)inlet_i7;break;
}
]]></code.krate>
   </obj.normal>
</objdefs>