<objdefs>
   <obj.normal id="gaussian" uuid="a0f2cae6eafbfa58e1f1cb28e369824c54486f79" sha="34a80904716df7e3875cee2c3056be75dc47aa9a">
      <sDescription>pseudo gaussian distributed (white) noise
Range -64..64</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>gaussian.axh</helpPatch>
      <inlets/>
      <outlets>
         <frac32buffer.bipolar name="wave" description="white noise"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[uint32_t seeds[8];
]]></code.declaration>
      <code.init><![CDATA[seeds[0] = 0x21c32332 + GenerateRandomNumber();
seeds[1] = 0xfbc57f7a + GenerateRandomNumber();
seeds[2] = 0x7dd1ef4a + GenerateRandomNumber();
seeds[3] = 0xe4ec34ad + GenerateRandomNumber();
seeds[4] = 0x72007b2f + GenerateRandomNumber();
seeds[5] = 0x3d1e9783 + GenerateRandomNumber();
seeds[6] = 0xa4a8f892 + GenerateRandomNumber();
seeds[7] = 0xc82c5e28 + GenerateRandomNumber();
]]></code.init>
      <code.srate><![CDATA[int i;
int32_t n=0;
for(i=0;i<8;i++){
   seeds[i] = (seeds[i] * 196314165) + 907633515;   n += ((int32_t)(seeds[i]))>>7;
}
outlet_wave= n;]]></code.srate>
   </obj.normal>
</objdefs>