<objdefs>
   <obj.normal id="square sync" uuid="8c4efe949c87c913d572a4303b8c63e097dac37e" sha="589b6f1d673b7fd79f9156a008d3939499d098dd">
      <upgradeSha>e9abdc8054b093adb2e84089b50cee0d5d7609</upgradeSha>
      <sDescription>square wave oscillator
Bandwith limited with sync input.
Sync resets oscillator phase on rising zero-crossing</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>square sync.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitch" description="pitch"/>
         <frac32buffer name="sync" description="sync, resets phase on rising zero-crossing"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="square wave, anti-aliased"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[  int32_t osc_p;
  static const int blepvoices = 8;
  int16_t *oscp[blepvoices];
  uint32_t nextvoice;
  int32_t i0;
]]></code.declaration>
      <code.init><![CDATA[    int j;
    for(j=0;j<blepvoices;j++)
      oscp[j] = &blept[BLEPSIZE-1];
   nextvoice = 0;
   i0 = 0;
]]></code.init>
      <code.krate><![CDATA[      int32_t freq;
      MTOFEXTENDED(param_pitch + inlet_pitch,freq);
  int j;
  int16_t *lastblep = &blept[BLEPSIZE-1];
  for(j=0;j<BUFSIZE;j++){
    int i;
    int p;
    p = osc_p;
    osc_p = p+(freq<<1);
    int32_t sum=0;
    int i1 = inlet_sync[j]>>2;
    if ((i1>0)&&!(i0>0)){   // phase reset
      int32_t x = 64-((-i0<<6)/(i1-i0));
      osc_p = x * (freq>>6);
      if (nextvoice&1) {
        nextvoice = (nextvoice+1)&(blepvoices-1);
        oscp[nextvoice] = &blept[x];
      }
    } else if ((osc_p>0)&&!(p>0)){   // dispatch
      nextvoice = (nextvoice+1)&(blepvoices-1);
      int32_t x = osc_p/(freq>>5);
      oscp[nextvoice] = &blept[x];
    }
    i0 = i1;
    for(i=0;i<blepvoices;i++){ // sample
      int16_t *t = oscp[i];
      if (i&1) sum+=*t; else sum-=*t; 
      t+=64;
      if (t>=lastblep) t=lastblep;
      oscp[i]=t;
    }
    sum -= ((((nextvoice+1)&1)<<1)-1)<<13;
    outlet_wave[j]=sum<<13;
  }]]></code.krate>
   </obj.normal>
</objdefs>