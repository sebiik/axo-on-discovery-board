<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Axoloti" default="default" basedir="." 
 xmlns:fx="javafx:com.sun.javafx.tools.ant">
    <description>Builds, tests, and runs the project Axoloti.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar:                  JAR building
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Axoloti-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 
    -->
    
  <property name="built_by"  value="${user.name}"/>

  <!-- run the ant timestamp task -->
  <tstamp/>

  <target name="-post-init" depends="create.build.version">
  </target>  
  <!-- Overrides -do-jar-->

  <target name="-javadoc-build">
  </target> 

  <target name="-do-jar">

    <!-- With included source files -->
    <jar destfile="dist/Axoloti.jar" filesetmanifest="mergewithoutmain" duplicate="preserve">
      <manifest>
        <attribute name="Main-Class" value="axoloti.Axoloti"/>
        <attribute name="Built-By" value="${built_by}"/>
        <attribute name="Created-By" value="${built_by}"/>
        <attribute name="Built-Date" value="${TODAY}"/>
        <attribute name="Implementation-Version" value="${build.version}"/>
        <attribute name="SplashScreen-Image" value="resources/splash.png"/>
      </manifest>

      <!-- Compiled  class  -->
      <fileset dir="build/classes"/>

      <!-- Include external library -->
      <zipfileset excludes="META-INF/*.SF" src="lib/org.eclipse.jgit-4.2.0.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/jsch-0.1.53.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/slf4j-api-1.7.13.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/slf4j-simple-1.7.13.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/simple-xml-2.7.1.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/rsyntaxtextarea-2.5.8.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/usb4java-1.2.0/lib/usb4java-1.2.0.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/usb4java-1.2.0/lib/libusb4java-1.2.0-linux-arm.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/usb4java-1.2.0/lib/libusb4java-1.2.0-linux-x86.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/usb4java-1.2.0/lib/libusb4java-1.2.0-linux-x86_64.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/usb4java-1.2.0/lib/libusb4java-1.2.0-osx-x86.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/usb4java-1.2.0/lib/libusb4java-1.2.0-osx-x86_64.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/usb4java-1.2.0/lib/libusb4java-1.2.0-windows-x86.jar"/>
      <zipfileset excludes="META-INF/*.SF" src="lib/usb4java-1.2.0/lib/libusb4java-1.2.0-windows-x86_64.jar"/>

      <!-- include source files -->
      <fileset dir="src">
        <include name="**/*.java"/>
      </fileset>
    </jar>
  </target>

  <target name="-post-jar" depends="bundle, runtime">
  </target>

  <target name="runtime" if="build.runtime" depends="calc.short.version">
		<exec dir="." executable="rm" >
			<arg line="-rf build/runtime/"/>
		</exec>
		<mkdir dir="build/runtime"/>
		<mkdir dir="build/runtime/macosx" />
		<mkdir dir="build/runtime/tmp/axoloti_runtime" />

		<!--Mac -->
		<exec dir="." executable="cp" os="Mac OS X">
			<arg line="-R platform_osx build/runtime/tmp/axoloti_runtime"/>
		</exec>
		<exec dir="." executable="rm" os="Mac OS X">
			<arg line="-rf build/runtime/tmp/axoloti_runtime/platform_osx/share"/>
		</exec>
		<exec dir="." executable="rm" os="Mac OS X">
			<arg line="-rf build/runtime/tmp/axoloti_runtime/platform_osx/src"/>
		</exec>
		<exec dir="." executable="rm" os="Mac OS X">
			<arg line="-rf build/runtime/tmp/axoloti_runtime/platform_osx/arm-none-eabi/lib/armv6-m build/runtime/tmp/axoloti_runtime/platform_osx/arm-none-eabi/lib/armv7-ar build/runtime/tmp/axoloti_runtime/platform_osx/arm-none-eabi/lib/armv7-m "/>
		</exec>
		<exec dir="." executable="rm" os="Mac OS X">
			<arg line="-rf build/runtime/tmp/axoloti_runtime/platform_osx/lib/gcc/arm-none-eabi/4.9.3/armv6-m build/runtime/tmp/axoloti_runtime/platform_osx/lib/gcc/arm-none-eabi/4.9.3/armv7-ar build/runtime/tmp/axoloti_runtime/platform_osx/lib/gcc/arm-none-eabi/4.9.3/armv7-m "/>
		</exec>
		<exec dir="." executable="hdiutil" os="Mac OS X">
			<arg line="create -megabytes 512 build/runtime/macosx/axo_runtime_mac_${short.version}.dmg -volname 'Axoloti Runtime' -srcfolder build/runtime/tmp" />
		</exec>
		<!--Linux -->
		<exec dir="." executable="cp" os="Linux">
			<arg line="-R platform_linux build/runtime/tmp/axoloti_runtime"/>
		</exec>
		<exec dir="." executable="rm" os="Linux">
			<arg line="-rf build/runtime/tmp/axoloti_runtime/platform_linux/share"/>
		</exec>
		<exec dir="." executable="rm" os="Linux">
			<arg line="-rf build/runtime/tmp/axoloti_runtime/platform_linux/src"/>
		</exec>
		<exec dir="." executable="rm" os="Linux">
			<arg line="-rf build/runtime/tmp/axoloti_runtime/platform_linux/arm-none-eabi/lib/armv6-m build/runtime/tmp/axoloti_runtime/platform_linux/arm-none-eabi/lib/armv7-ar build/runtime/tmp/axoloti_runtime/platform_linux/arm-none-eabi/lib/armv7-m "/>
		</exec>
		<exec dir="." executable="rm" os="Linux">
			<arg line="-rf build/runtime/tmp/axoloti_runtime/platform_linux/lib/gcc/arm-none-eabi/4.9.3/armv6-m build/runtime/tmp/axoloti_runtime/platform_linux/lib/gcc/arm-none-eabi/4.9.3/armv7-ar build/runtime/tmp/axoloti_runtime/platform_linux/lib/gcc/arm-none-eabi/4.9.3/armv7-m "/>
		</exec>
		<mkdir dir="build/runtime/linux"/>
		<exec dir="build/runtime/tmp" executable="tar" os="Linux">
			<arg value="-zcvf"/>
			<arg value="../linux/axo_runtime_linux_${short.version}.tgz"/>
			<arg value="."/>
		</exec>
		<!--Windows -->
		<mkdir dir="build/runtime/tmp_win/axoloti_runtime"/>
		<exec dir="." executable="cp" osfamily="Windows">
			<arg line="-R platform_win build/runtime/tmp_win/axoloti_runtime"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/share"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/src"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/man"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-f build/runtime/tmp_win/axoloti_runtime/platform_win/mrproper.bat"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/apache-ant-1.9.4"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/include"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/contrib"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-f build/runtime/tmp_win/axoloti_runtime/platform_win/build.bat"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-f build/runtime/tmp_win/axoloti_runtime/platform_win/build.sh"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-f build/runtime/tmp_win/axoloti_runtime/platform_win/build_gui.bat"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-f build/runtime/tmp_win/axoloti_runtime/platform_win/build_dist.bat"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-f build/runtime/tmp_win/axoloti_runtime/platform_win/build-libusb.sh"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-f build/runtime/tmp_win/axoloti_runtime/platform_win/zadig.html"/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/arm-none-eabi/lib/armv6-m build/runtime/tmp_win/axoloti_runtime/platform_win/arm-none-eabi/tmp_win/armv7-ar build/runtime/tmp_win/axoloti_runtime/platform_win/arm-none-eabi/lib/armv7-m "/>
		</exec>                
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/arm-none-eabi/lib/armv6-m build/runtime/tmp_win/axoloti_runtime/platform_win/arm-none-eabi/lib/armv7-ar build/runtime/tmp_win/axoloti_runtime/platform_win/arm-none-eabi/lib/armv7-m "/>
		</exec>
		<exec dir="." executable="rm" osfamily="Windows">
			<arg line="-rf build/runtime/tmp_win/axoloti_runtime/platform_win/lib/gcc/arm-none-eabi/4.9.3/armv6-m build/runtime/tmp_win/axoloti_runtime/platform_win/lib/gcc/arm-none-eabi/4.9.3/armv7-ar build/runtime/tmp_win/axoloti_runtime/platform_win/lib/gcc/arm-none-eabi/4.9.3/armv7-m "/>
		</exec>
  </target>

  <target name="userguide">
	<echo>generate user guide</echo>
	<exec dir="." executable="curl" failifexecutionfails="false">
		<arg line="http://community.axoloti.com/raw/50/1 -o doc/userguide.md"/>
	</exec>
	<exec dir="." executable="perl" failifexecutionfails="false">
		<arg line="thirdparty/Markdown_1.0.1/Markdown.pl -output 'doc/user guide.html' --html4tags doc/userguide.md"/>
	</exec>
  </target>

  <target name="bundle" if="build.bundle" depends="calc.build.version, calc.short.version, userguide">
	<echo>bundling ${build.version} ${short.version}</echo>
	<echo>${java.home}</echo>
	<exec dir="." executable="rm" >
		<arg line="-rf build/bundles/"/>
	</exec>
	<taskdef resource="com/sun/javafx/tools/ant/antlib.xml"      
			uri="javafx:com.sun.javafx.tools.ant"
			classpath=".:${java.home}/../lib/ant-javafx.jar"/>    
	<fx:resources id="appRes">
		 <fx:fileset type="license" dir="." includes="license.txt"/>
		 <fx:fileset dir="dist">
         		<include name="axoloti-app.jar"/>
		 </fx:fileset>
		 <fx:fileset dir="lib">
             <include name="org.eclipse.jgit-4.2.0.jar"/>
             <include name="jsch-0.1.53.jar"/>
             <include name="slf4j-api-1.7.13.jar"/>
             <include name="slf4j-simple-1.7.13.jar"/>
			 <include name="simple-xml-2.7.1.jar"/>
             <include name="rsyntaxtextarea-2.5.8.jar"/>
			 <include name="usb4java-1.2.0/lib/usb4java-1.2.0.jar"/>
			 <include name="usb4java-1.2.0/lib/libusb4java-1.2.0-linux-arm.jar"/>
			 <include name="usb4java-1.2.0/lib/libusb4java-1.2.0-linux-x86.jar"/>
			 <include name="usb4java-1.2.0/lib/libusb4java-1.2.0-linux-x86_64.jar"/>
			 <include name="usb4java-1.2.0/lib/libusb4java-1.2.0-osx-x86.jar"/>
			 <include name="usb4java-1.2.0/lib/libusb4java-1.2.0-osx-x86_64.jar"/>
			 <include name="usb4java-1.2.0/lib/libusb4java-1.2.0-windows-x86.jar"/>
			 <include name="usb4java-1.2.0/lib/libusb4java-1.2.0-windows-x86_64.jar"/>
		 </fx:fileset>
		 <fx:fileset dir=".">
			 <include name="doc/*"/>
			 <include name="firmware/*" />
			 <include name="firmware/STM*/**/*" />
			 <include name="firmware/mutable_instruments/**/*" />
			 <include name="firmware/build/*.bin" />
			 <include name="firmware/build/*.elf" />
			 <include name="firmware/flasher/*" />
			 <include name="firmware/flasher/flasher_build/*.bin" />
			 <include name="firmware/flasher/flasher_build/*.elf" />
			 <include name="firmware/mounter/*" />
			 <include name="firmware/mounter/mass_storage/*" />
			 <include name="firmware/mounter/mounter_build/*.bin" />
			 <include name="firmware/mounter/mounter_build/*.elf" />
			 <include name="chibios/*"/>
			 <include name="chibios/boards/ST_STM32F4_DISCOVERY/*"/>
			 <include name="chibios/ext/**/*"/>
			 <include name="chibios/os/**/*"/>
			 <include name="chibios/docs/**/*"/>
			 <include name="CMSIS/**/*"/>
			 <include name="patch/**/*"/>
			 <include name="*.txt"/>
			 <include name="public_key.der"/>
		 </fx:fileset>
	</fx:resources>

	<fx:jar destfile="dist/axoloti-app.jar">
		<!-- Details about application -->
		<fx:application name="Axoloti" mainClass="axoloti.Axoloti" version="${build.version}"/>
	 
		<!-- Define what auxilary resources are needed -->
		<fx:resources refid="appRes"/>
				
		<!-- What to include into result jar file?
			 Everything in the build tree -->
		<fileset dir="build/classes"/>
	 
		<!-- Customize jar manifest (optional) -->
		<manifest>
			<attribute name="Implementation-Vendor" value="Axoloti"/>
			<attribute name="Implementation-Version" value="${build.version}"/>
			<attribute name="Main-Class" value="axoloti.Axoloti"/>
			<attribute name="Built-By" value="${built_by}"/>
			<attribute name="Created-By" value="${built_by}"/>
			<attribute name="Built-Date" value="${TODAY}"/>
			<attribute name="SplashScreen-Image" value="resources/splash.png"/>
		</manifest>
	</fx:jar> 

    	<fx:deploy os="Linux" nativeBundles="deb" width="100" height="100" outdir="build/" outfile="AxolotiApp" version="${build.version}">
            <fx:info title="Axoloti" 
		     vendor="axoloti" 
		     description="Axoloti application"
		     license="GPL"
		     copyright="Axoloti.com" >
		  		<fx:icon href="src/main/java/resources/icon_128x128.png"/>
				<fx:splash href="src/main/java/resources/splash.png"/>
		  		<fx:association icon="src/main/java/resources/icon_128x128.png" mimetype="application/xml" extension="axp axs axh axo"/>
	      	</fx:info>
			<fx:application name="Axoloti" mainClass="axoloti.Axoloti" version="${short.version}"/>
	    	<fx:resources refid="appRes"/>
    	</fx:deploy>

    	<fx:deploy os="Mac OS X" nativeBundles="dmg" width="100" height="100" outdir="build/" outfile="AxolotiApp" version="${build.version}">
            <fx:info title="Axoloti" 
		     vendor="axoloti" 
		     description="Axoloti application"
		     license="GPL"
		     copyright="Axoloti.com" >
				<fx:icon href="src/main/java/resources/axoloti_icon.icns"/>
				<fx:splash href="src/main/java/resources/splash.png"/>
		  		<fx:association mimetype="application/xml" extension="axp axs axh axo"/>
	      	</fx:info>
			<fx:application name="Axoloti" mainClass="axoloti.Axoloti" version="${short.version}"/>
	    	<fx:resources refid="appRes"/>
    	</fx:deploy>

	<exec dir="." executable="mv" os="Mac OS X">
		<arg line="build/bundles/Axoloti-${short.version}.dmg build/bundles/axoloti-mac-${short.version}.dmg"/>
	</exec>

	<exec dir="." executable="mv" os="Linux">
		<arg line="build/bundles/axoloti-${short.version}.deb build/bundles/axoloti-linux-${short.version}.deb"/>
	</exec>

    	<fx:deploy os="Windows" nativeBundles="msi" width="100" height="100" outdir="build/" outfile="AxolotiApp" version="${build.version}">
            <fx:info title="Axoloti" 
		     vendor="axoloti" 
		     description="Axoloti application"
		     license="GPL"
		     copyright="Axoloti.com" >
				<fx:icon href="src/main/java/resources/axoloti_icon.ico"/>
				<fx:splash href="src/main/java/resources/splash.png"/>
		  		<fx:association icon="src/main/java/resources/axoloti_icon.ico" mimetype="application/xml" extension="axp axs axh axo"/>
	      	</fx:info>
			<fx:application name="Axoloti" mainClass="axoloti.Axoloti" version="${short.version}"/>
	    <fx:resources refid="appRes"/>
    	</fx:deploy>

	<exec dir="." executable="mv" osfamily="Windows">
		<arg line="build/bundles/axoloti-${short.version}.msi build/bundles/axoloti-win-${short.version}.msi"/>
	</exec>

  </target>

    <target name="calc.short.version">
        <exec executable="git" outputproperty="tag.short.version" failifexecutionfails="false">
            <arg line = "describe --tags --always" />
        </exec>
        <property name="tag.short.version" value="(git missing)"/>
        <exec executable="sed" inputstring="${tag.short.version}" outputproperty="short.version" failifexecutionfails="false">
            <arg line = "'s/[a-zA-Z\-].*//'" />
	</exec>
        <property name="short.version" value="${tag.short.version}"/>
	<echo> calculated short ${short.version}</echo>
    </target>

    <target name="calc.build.version">
        <exec executable="git" outputproperty="build.version" failifexecutionfails="false">
            <arg line = "describe --long --tags --dirty --always" />
        </exec>
		<echo> calculated ${build.version}</echo>
    </target>

    <target name="create.build.version" depends = "calc.build.version, calc.short.version">
		<tstamp>
		    <format property="build.time" pattern="dd/MM/yyyy HH:mm:ss z"/>
		</tstamp>
		<property name="build.version" value="(git missing)"/>
        <property name="short.version" value="(git missing)"/>
        <echo output="src/main/java/axoloti/Version.java" >package axoloti;${line.separator}</echo>
        <echo output="src/main/java/axoloti/Version.java" append="true">public class Version {${line.separator}</echo>
        <echo output="src/main/java/axoloti/Version.java" append="true">public final static String AXOLOTI_VERSION = "${build.version}";${line.separator}</echo>
        <echo output="src/main/java/axoloti/Version.java" append="true">public final static String AXOLOTI_SHORT_VERSION = "${short.version}";${line.separator}</echo>
        <echo output="src/main/java/axoloti/Version.java" append="true">public final static String AXOLOTI_BUILD_TIME = "${build.time}";${line.separator}</echo>
        <echo output="src/main/java/axoloti/Version.java" append="true">};${line.separator}</echo>
    </target>
      
</project>
